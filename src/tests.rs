#[cfg(test)]
use crate::s;
use rstest::rstest;

#[rstest]
#[case("pi()", "π")]
#[case("e()", "e")]
#[case("true", "true")]
#[case("false", "false")]
#[case("null", "null")]
#[case(r#""str""#, "str")]
fn print_object(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}

#[rstest]
#[case("0", "0")]
#[case("-0", "0")]
#[case("1", "1")]
#[case("-1", "-1")]
#[case("10", "10")] // 十 da 10^1
#[case("100", "100")] // 百 h 10^2
#[case("1000", "1000")] // 千 k 10^3
#[case("10000", "10000")] // 万
#[case("100000", "100000")]
#[case("1000000", "1000000")] // 兆 M 10^6
#[case("10000000", "10000000")]
#[case("100000000", "100000000")] // 亿
#[case("1000000000", "1000000000")] // 吉 G 10^9
#[case("10000000000", "10000000000")]
#[case("100000000000", "100000000000")]
#[case("1000000000000", "1000000000000")] // 太 T 10^12
#[case("1000000000000000", "1000000000000000")] // 拍 P 10^15
#[case("1000000000000000000", "1000000000000000000")] // 艾 E 10^18
#[case("1000000000000000000000", "1000000000000000000000")] // 泽 Z 10^21
#[case("1000000000000000000000000", "1000000000000000000000000")] // 尧 Y 10^24
#[case("1000000000000000000000000000", "1000000000000000000000000000")] // 容 R 10^27
#[case("1000000000000000000000000000000", "1000000000000000000000000000000")] // 昆 Q 10^30
#[case("0.1", "0.1")] // 分 d 10^(-1)
#[case("0.01", "0.01")] // 厘 c 10^(-2)
#[case("0.001", "0.001")] // 毫 m 10^(-3)
#[case("0.0001", "0.0001")]
#[case("0.00001", "0.00001")]
#[case("0.000001", "0.000001")] // 微 μ 10^(-6)
#[case("0.0000001", "0.0000001")]
#[case("0.00000001", "0.00000001")]
#[case("0.000000001", "0.000000001")] // 纳 n 10^(-9)
#[case("0.0000000001", "0.0000000001")]
#[case("0.00000000001", "0.00000000001")]
#[case("0.000000000001", "0.000000000001")] // 皮 p 10^(-12)
#[case("0.000000000000001", "0.000000000000001")] // 飞 f 10^(-15)
#[case("0.000000000000000001", "0.000000000000000001")] // 阿 a 10^(-18)
#[case("0.000000000000000000001", "0.000000000000000000001")] // 仄 z 10^(-21)
#[case("0.000000000000000000000001", "0.000000000000000000000001")] // 幺 y 10^(-24)
#[case("0.000000000000000000000000001", "0.000000000000000000000000001")] // 柔 r 10^(-27)
#[case("0.000000000000000000000000000001", "0.000000000000000000000000000001")] // 亏 p 10^(-30)
fn print_number(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}

#[rstest]
#[case("0", "0")]
#[case("-0", "0")]
#[case("1", "1")]
#[case("-1", "Error: sqrt() of negative number")]
#[case("2", "√2")]
#[case("4", "2")]
#[case("8", "2√2")]
#[case("10", "√10")] // 十 da 10^1
#[case("100", "10")] // 百 h 10^2
#[case("1000", "10√10")] // 千 k 10^3
#[case("10000", "100")] // 万
#[case("100000", "100√10")]
#[case("1000000", "1000")] // 兆 M 10^6
#[case("10000000", "1000√10")]
#[case("100000000", "10000")] // 亿
#[case("1000000000", "10000√10")] // 吉 G 10^9
#[case("10000000000", "100000")]
#[case("100000000000", "100000√10")]
#[case("1000000000000", "1000000")] // 太 T 10^12
#[case("1000000000000000", "10000000√10")] // 拍 P 10^15
#[case("1000000000000000000", "1000000000")] // 艾 E 10^18
#[case("1000000000000000000000", "10000000000√10")] // 泽 Z 10^21
#[case("1000000000000000000000000", "1000000000000")] // 尧 Y 10^24
#[case("1000000000000000000000000000", "10000000000000√10")] // 容 R 10^27
#[case("1000000000000000000000000000000", "1000000000000000")] // 昆 Q 10^30
#[case("0.1", "√0.1")] // 分 d 10^(-1)
#[case("0.01", "√0.01")] // 厘 c 10^(-2)
#[case("0.001", "√0.001")] // 毫 m 10^(-3)
#[case("0.0001", "√0.0001")]
#[case("0.00001", "√0.00001")]
#[case("0.000001", "√0.000001")] // 微 μ 10^(-6)
#[case("0.0000001", "√0.0000001")]
#[case("0.00000001", "√0.00000001")]
#[case("0.000000001", "√0.000000001")] // 纳 n 10^(-9)
#[case("0.0000000001", "√0.0000000001")]
#[case("0.00000000001", "√0.00000000001")]
#[case("0.000000000001", "√0.000000000001")] // 皮 p 10^(-12)
#[case("0.000000000000001", "√0.000000000000001")] // 飞 f 10^(-15)
#[case("0.000000000000000001", "√0.000000000000000001")] // 阿 a 10^(-18)
#[case("0.000000000000000000001", "√0.000000000000000000001")] // 仄 z 10^(-21)
#[case("0.000000000000000000000001", "√0.000000000000000000000001")] // 幺 y 10^(-24)
#[case("0.000000000000000000000000001", "√0.000000000000000000000000001")] // 柔 r 10^(-27)
#[case(
    "0.000000000000000000000000000001",
    "√0.000000000000000000000000000001"
)] // 亏 p 10^(-30)
#[case("pi()", "√π")]
#[case("e()", "√e")]
#[case("true", "Error: sqrt() requires numeric argument")]
#[case("false", "Error: sqrt() requires numeric argument")]
#[case("null", "Error: sqrt() requires numeric argument")]
#[case(r#""str""#, "Error: sqrt() requires numeric argument")]
fn print_sqrt(#[case] input: String, #[case] expected: String) {
    assert_eq!(
        expected,
        s(format!("sqrt({})", input.clone())),
        "简单表达式“sqrt({})”",
        input
    );
}

#[rstest]
#[case("1/1", "1")]
#[case("1  / 1", "1")]
#[case("1/0", "Error: Division by zero")]
#[case("-1/1", "-1")]
#[case("2/10", "1/5")]
#[case("1/10", "1/10")]
#[case("1/100", "1/100")]
#[case("1/1000", "1/1000")]
#[case("1/10000", "1/10000")]
#[case("1/100000", "1/100000")]
#[case("1/1000000", "1/1000000")]
#[case("1/10000000", "1/10000000")]
#[case("1/100000000", "1/100000000")]
#[case("1/1000000000", "1/1000000000")]
#[case("1/10000000000", "1/10000000000")]
#[case("1/100000000000", "1/100000000000")]
#[case("1/1000000000000", "1/1000000000000")]
#[case("1/1000000000000000", "1/1000000000000000")]
#[case("1/1000000000000000000", "1/1000000000000000000")]
#[case("1/1000000000000000000000", "1/1000000000000000000000")]
#[case("1/1000000000000000000000000", "1/1000000000000000000000000")]
#[case("1/1000000000000000000000000000", "1/1000000000000000000000000000")]
#[case(
    "1/1000000000000000000000000000000",
    "1/1000000000000000000000000000000"
)]
#[case("1/0.1", "10")]
#[case("1/0.01", "100")]
#[case("1/0.001", "1000")]
#[case("1/0.0001", "10000")]
#[case("1/0.00001", "100000")]
#[case("1/0.000001", "1000000")]
#[case("1/0.0000001", "10000000")]
#[case("1/0.00000001", "100000000")]
#[case("1/0.000000001", "1000000000")]
#[case("1/0.0000000001", "10000000000")]
#[case("1/0.00000000001", "100000000000")]
#[case("1/0.000000000001", "1000000000000")]
#[case("1/0.000000000000001", "1000000000000000")]
#[case("1/0.000000000000000001", "1000000000000000000")]
#[case("1/0.000000000000000000001", "1000000000000000000000")]
#[case("1/0.000000000000000000000001", "1000000000000000000000000")]
#[case("1/0.000000000000000000000000001", "1000000000000000000000000000")]
#[case(
    "1/0.000000000000000000000000000001",
    "1000000000000000000000000000000"
)]
#[case("10/1", "10")]
#[case("100/1", "100")]
#[case("1000/1", "1000")]
#[case("10000/1", "10000")]
#[case("100000/1", "100000")]
#[case("1000000/1", "1000000")]
#[case("10000000/1", "10000000")]
#[case("100000000/1", "100000000")]
#[case("1000000000/1", "1000000000")]
#[case("10000000000/1", "10000000000")]
#[case("100000000000/1", "100000000000")]
#[case("1000000000000/1", "1000000000000")]
#[case("1000000000000000/1", "1000000000000000")]
#[case("1000000000000000000/1", "1000000000000000000")]
#[case("1000000000000000000000/1", "1000000000000000000000")]
#[case("1000000000000000000000000/1", "1000000000000000000000000")]
#[case("1000000000000000000000000000/1", "1000000000000000000000000000")]
#[case("1000000000000000000000000000000/1", "1000000000000000000000000000000")]
#[case("0.1/1", "1/10")]
#[case("0.01/1", "1/100")]
#[case("0.001/1", "1/1000")]
#[case("0.0001/1", "1/10000")]
#[case("0.00001/1", "1/100000")]
#[case("0.000001/1", "1/1000000")]
#[case("0.0000001/1", "1/10000000")]
#[case("0.00000001/1", "1/100000000")]
#[case("0.000000001/1", "1/1000000000")]
#[case("0.0000000001/1", "1/10000000000")]
#[case("0.00000000001/1", "1/100000000000")]
#[case("0.000000000001/1", "1/1000000000000")]
#[case("0.000000000000001/1", "1/1000000000000000")]
#[case("0.000000000000000001/1", "1/1000000000000000000")]
#[case("0.000000000000000000001/1", "1/1000000000000000000000")]
#[case("0.000000000000000000000001/1", "1/1000000000000000000000000")]
#[case("0.000000000000000000000000001/1", "1/1000000000000000000000000000")]
#[case(
    "0.000000000000000000000000000001/1",
    "1/1000000000000000000000000000000"
)]
#[case("1/pi()", "1/π")]
#[case("1/e()", "1/e")]
#[case("1/true", "Error: Arithmetic operation '/' requires numeric operands")]
#[case("1/false", "Error: Arithmetic operation '/' requires numeric operands")]
#[case("1/null", "Error: Arithmetic operation '/' requires numeric operands")]
#[case(
    r#"1/"str""#,
    "Error: Arithmetic operation '/' requires numeric operands"
)]
#[case("pi()/1", "π")]
#[case("e()/1", "e")]
#[case("pi()/2", "π/2")]
#[case("e()/2", "e/2")]
#[case("pi()/3", "π/3")]
#[case("e()/3", "e/3")]
#[case("true/1", "Error: Arithmetic operation '/' requires numeric operands")]
#[case("false/1", "Error: Arithmetic operation '/' requires numeric operands")]
#[case("null/1", "Error: Arithmetic operation '/' requires numeric operands")]
#[case(
    r#""str"/1"#,
    "Error: Arithmetic operation '/' requires numeric operands"
)]
fn print_frac(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}
