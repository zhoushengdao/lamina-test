use lamina_test::s;
use rstest::rstest;

#[rstest]
#[case("0", "0")]
#[case("-0", "0")]
#[case("1", "1")]
#[case("-1", "-1")]
fn normal_number(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}

#[rstest]
#[case("10", "10")] // 十 da 10^1
#[case("100", "100")] // 百 h 10^2
#[case("1000", "1000")] // 千 k 10^3
#[case("10000", "10000")] // 万
#[case("100000", "100000")]
#[case("1000000", "1000000")] // 兆 M 10^6
#[case("10000000", "10000000")]
#[case("100000000", "100000000")] // 亿
#[case("1000000000", "1000000000")] // 吉 G 10^9
#[case("10000000000", "10000000000")]
#[case("100000000000", "100000000000")]
#[case("1000000000000", "1000000000000")] // 太 T 10^12
#[case("1000000000000000", "1000000000000000")] // 拍 P 10^15
#[case("1000000000000000000", "1000000000000000000")] // 艾 E 10^18
#[case("1000000000000000000000", "1000000000000000000000")] // 泽 Z 10^21
#[case("1000000000000000000000000", "1000000000000000000000000")] // 尧 Y 10^24
#[case("1000000000000000000000000000", "1000000000000000000000000000")] // 容 R 10^27
#[case("1000000000000000000000000000000", "1000000000000000000000000000000")] // 昆 Q 10^30
fn big_number(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}

#[rstest]
#[case("0.1", "0.1")] // 分 d 10^(-1)
#[case("0.01", "0.01")] // 厘 c 10^(-2)
#[case("0.001", "0.001")] // 毫 m 10^(-3)
#[case("0.0001", "0.0001")]
#[case("0.00001", "0.00001")]
#[case("0.000001", "0.000001")] // 微 μ 10^(-6)
#[case("0.0000001", "0.0000001")]
#[case("0.00000001", "0.00000001")]
#[case("0.000000001", "0.000000001")] // 纳 n 10^(-9)
#[case("0.0000000001", "0.0000000001")]
#[case("0.00000000001", "0.00000000001")]
#[case("0.000000000001", "0.000000000001")] // 皮 p 10^(-12)
#[case("0.000000000000001", "0.000000000000001")] // 飞 f 10^(-15)
#[case("0.000000000000000001", "0.000000000000000001")] // 阿 a 10^(-18)
#[case("0.000000000000000000001", "0.000000000000000000001")] // 仄 z 10^(-21)
#[case("0.000000000000000000000001", "0.000000000000000000000001")] // 幺 y 10^(-24)
#[case("0.000000000000000000000000001", "0.000000000000000000000000001")] // 柔 r 10^(-27)
#[case("0.000000000000000000000000000001", "0.000000000000000000000000000001")] // 亏 p 10^(-30)
fn small_number(#[case] input: String, #[case] expected: String) {
    assert_eq!(expected, s(input.clone()), "简单表达式“{}”", input);
}
